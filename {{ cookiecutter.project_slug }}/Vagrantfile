# -*- mode: ruby -*-
# vi: set ft=ruby :

$dev_vm_post_up_script = <<-SCRIPT
sudo mount /opt/{{ cookiecutter.project_slug }}_backend/current/venv &> /dev/null || true
sudo systemctl restart {{ cookiecutter.project_slug }} &> /dev/null || true
SCRIPT

$controller_vm_setup_script = <<-SCRIPT
if ! grep -q "cd /vagrant/provisioning" ~/.bashrc ; then 
  echo "cd /vagrant/provisioning" >> ~/.bashrc 
fi
# install ansible requirements
sudo yum install -y epel-release
sudo yum install -y python36 python36-pip python36-devel sshpass
# Vagrant doesn't allow us to specify which version of pip/python is used to
# install our provisioning requirements when using the 'ansible_local'
# provisioner, so we set the system default to Python 3.
sudo alternatives --install /usr/bin/pip pip /usr/bin/pip3.6 1
SCRIPT

Vagrant.require_version ">= 2.2.5"

if Vagrant::Util::Platform.windows? then
  def running_as_admin
    # query the LOCAL SERVICE account reg key (requires admin privileges)
    system('reg query "HKU\S-1-5-19"', :out => File::NULL)
  end

  unless running_as_admin
    puts "Admin rights are required to create symlinks. Try running this Vagrantfile again from an admin command prompt."
    exit 1
  end
end

Vagrant.configure("2") do |config|

  config.vagrant.plugins = [
    "vagrant-vbguest",
    "vagrant-hostmanager",
  ]
  config.vm.box = "centos/7"
  config.vm.box_check_update = true
  # disable the default vagrant mount. We configure custom mounts on the VM separately.
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vbguest.auto_update = true
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true

  config.vm.define "dev", primary: true do |machine|
    machine.vm.hostname = "{{ cookiecutter.dev_vm_hostname }}"

    # Enables X11 forwarding. This can be useful when running Selenium tests
    # since you can see exactly what's happening in the browser during the tests.
    # This requires an X11 server on your host machine, see https://www.xquartz.org
    # for Mac hosts or http://x.cygwin.com for Windows hosts.
    machine.ssh.forward_x11 = true
    machine.vm.synced_folder(
      "./backend_app",
      "/opt/{{ cookiecutter.project_slug }}_backend/current",
      type: "virtualbox",
      mount_options: ["uid=1234", "gid=1234"]
    )

    # Ensure that the 'venv' folder is mounted after vagrant has configured its
    # mounts if running 'vagrant up' without re-provisioning (ie instead of
    # 'vagrant up --provision'). Restart the backend app service - systemd may
    # set this unit as failed shortly after boot since the files within the
    # vagrant mount won't be available initially. These commands would fail
    # on an initial 'vagrant up' without '|| true' since this trigger is
    # executed after 'up' but *before* the ansible provisioning is run
    # (which adds this mount configuration into /etc/fstab and creates the
    # systemd service).
    machine.vm.provision "shell", inline: $dev_vm_post_up_script, run: "always"

    machine.vm.network "private_network", ip: "172.17.177.21"
    machine.vm.provider "virtualbox" do |virtualbox|
      virtualbox.name = "{{ cookiecutter.project_slug }}_dev"
      virtualbox.memory = 1024
    end
  end

  config.vm.define "db" do |machine|
    machine.vm.hostname = "{{ cookiecutter.db_vm_hostname }}"
    machine.vm.network "private_network", ip: "172.17.177.22"
    machine.vm.provider "virtualbox" do |virtualbox|
      virtualbox.name = "{{ cookiecutter.project_slug }}_db"
      virtualbox.memory = 512
    end
  end

  # We spin up another VM and execute ansible using the ansible_local vagrant
  # provisioner, as opposed to executing ansible directly from the host
  # machine.
  #
  # This helps simplify the initial setup process, creates a
  # consistent provisioning environment and allows us to provision a
  # dev environment on host machines where Ansible is not supported,
  # such as Windows.
  # (see https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#can-ansible-run-on-windows )
  #
  # However, this process does result in the creation of a 'controller' VM,
  # which increases the system resources used for this dev environment.
  config.vm.define "controller" do |machine|
    machine.vm.network "private_network", ip: "172.17.177.20"
    machine.vm.synced_folder "./", "/vagrant", type: "virtualbox"
    # Mount the folder containing the dev vm ssh keys with explicit file
    # permissions. This addresses 'unprotected private key file' errors on
    # Windows, due to mounts on Windows having 777 file permissions by default.
    machine.vm.synced_folder(
      "./.vagrant/machines",
      "/vagrant_machines",
      type: "virtualbox",
      mount_options: ["fmode=600"]
    )

    machine.vm.provider "virtualbox" do |virtualbox|
      virtualbox.name = "{{ cookiecutter.project_slug }}_controller"
      virtualbox.memory = 256
    end

    machine.vm.provision "shell", inline: $controller_vm_setup_script, privileged: false

    machine.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "playbook.yml"
      ansible.provisioning_path = "/vagrant/provisioning"
      ansible.config_file = "ansible-vagrant.cfg"
      ansible.install_mode = "pip_args_only"
      ansible.pip_args = "-r /vagrant/provisioning/requirements.txt"
      ansible.galaxy_role_file = "requirements.yml"
      ansible.galaxy_command = "ansible-galaxy install --role-file=%{role_file}"
      ansible.verbose = false
      ansible.limit = "all,localhost"
      ansible.inventory_path = "environments/dev/inventory"
    end
    # Shut down the controller VM once it has finished provisioning the other VMs.
    # machine.vm.provision "shell", inline: "shutdown -h now"
  end

end
